<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       ">

	<!-- 扫描注解Bean -->
	<context:component-scan base-package="org.chingo.gutcom">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 配置DBCP数据源 -->
	<!-- 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test" />
		<property name="username" value="root" />
	</bean>
	 -->
	 <!-- 配置c3p0数据源 -->
	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	 	<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/gutcom" />
		<property name="user" value="root" />
		<property name="maxPoolSize" value="40" />
		<property name="minPoolSize" value="1" />
		<property name="initialPoolSize" value="1" />
		<property name="maxIdleTime" value="20" />
	 </bean>

	<!-- 配置SessionFactory,由Spring容器来管理Hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0, yes 'Y', no 'N'</prop>
				<!-- 在Spring @Transactional声明式事务管理,"currentSession"的定义为: 当前被 Spring事务管理器 管理的Session。此时应增加如下配置 -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<!-- 关闭hibernate.temp.use_jdbc_metadata_defaults，防止启动时出现如下INFO级别的警告信息： -->
				<!-- Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException -->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<!-- <value>myssh/entity/User.hbm.xml</value> -->
				<value>org/chingo/gutcom/domain/CommonFilterWord.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonMsgRecv.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonMsgSend.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonOplog.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonSmile.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonSmileCategory.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonSysconf.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonSyslog.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonUser.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonUserProfile.hbm.xml</value>
				<value>org/chingo/gutcom/domain/CommonUserStatus.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareCategory.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareComment.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareContent.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareFav.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareReport.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareStatus.hbm.xml</value>
				<value>org/chingo/gutcom/domain/ShareUrl.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboAt.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboContent.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboFav.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboFollow.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboFollowGroup.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboReport.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboTopic.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboTopicFollow.hbm.xml</value>
				<value>org/chingo/gutcom/domain/WeiboTopicRelation.hbm.xml</value>
			</list>
		</property>
	</bean>
	<!-- spring的hibernate事务管理器 责任：负责session的开启和管理，负责事务的开启、提交、回滚（遇到RuntimeException会自动回滚） -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 需要引入tx的命名空间 -->
	<!-- 这是事务通知操作（传播特性），使用的事务管理器引用自 transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->
			<tx:method name="add*" propagation="REQUIRED" />  <!-- 根据每个（类）方法配置事务的传播特性 -->
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="fetch*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 需要引入aop的命名空间（配置事物的切入点） -->
	<aop:config>
		<!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
		<aop:pointcut id="serviceMethods" expression="execution(* org.chingo.gutcom.service.*.*(..))" />
		<!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config>
</beans>
